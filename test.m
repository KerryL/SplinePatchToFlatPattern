function test

points = [
    117.3421,	0,	2.569329359;
	117.3159,	-0.669291,	2.572836266;
	117.2896,	-0.984252,	2.576356559;
	117.2634,	-1.14173,	2.579863466;
	117.2503,	-1.29921,	2.58161692;
	117.1978,	-1.61417,	2.58864412;
	117.1322,	-1.90289,	2.597424774;
	117.0534,	-2.20472,	2.607972267;
	116.9747,	-2.49344,	2.618506375;
	116.8697,	-2.76903,	2.632560775;
	116.7647,	-3.04462,	2.646615175;
	116.5285,	-3.56955,	2.678230884;
	116.3841,	-3.8189,	2.69755903;
	116.2398,	-4.06824,	2.716873792;
	115.9248,	-4.54068,	2.759036993;
	115.7542,	-4.76378,	2.781872047;
	115.5705,	-4.98688,	2.806460555;
	115.1768,	-5.40682,	2.859157864;
	114.7568,	-5.80052,	2.915375465;
	114.5337,	-5.99738,	2.94523772;
	114.2975,	-6.1811,	2.976853428;
	113.8119,	-6.52231,	3.041851683;
	113.3001,	-6.85039,	3.110356846;
	112.749,	-7.13911,	3.18412237;
	112.1846,	-7.4147,	3.259668118;
	111.5941,	-7.67717,	3.338707388;
	110.9773,	-7.90026,	3.421266951;
	110.3474,	-8.11024,	3.505579968;
	109.6912,	-8.29396,	3.593413278;
	109.0219,	-8.45144,	3.683000041;
	108.3264,	-8.5958,	3.776093712;
	107.6177,	-8.71391,	3.870954221;
	106.9091,	-8.8189,	3.965801346;
	106.5416,	-8.85827,	4.014991747;
	106.1741,	-8.89764,	4.064182148;
	105.4261,	-8.95013,	4.164303019;
	104.6781,	-9.00262,	4.26442389;
	103.9169,	-9.01575,	4.3663116;
	102.3946,	-9.00262,	4.570073635;
	100.8461,	-8.92388,	4.777342577;
	100.0718,	-8.84514,	4.88098374;
	99.2975,	-8.7664,	4.984624904;
	98.5364,	-8.66142,	5.086499229;
	97.7752,	-8.54331,	5.188386938;
	97.014,	-8.39895,	5.290274648;
	96.266,	-8.25459,	5.390395519;
	94.7831,	-7.90026,	5.588883807;
	93.36575,	-7.49344,	5.778598134;
	92.00092,	-7.03412,	5.961282584;
	91.34475,	-6.78478,	6.049111878;
	90.71483,	-6.52231,	6.133427571;
	90.39987,	-6.39108,	6.175585418;
	90.09803,	-6.24672,	6.215987135;
	89.50748,	-5.95801,	6.295033098;
	88.94318,	-5.65617,	6.370565461;
	88.39199,	-5.34121,	6.444343031;
	88.12953,	-5.18373,	6.479473678;
	87.88018,	-5.02625,	6.512849532;
	87.63084,	-4.85564,	6.546224048;
	87.39462,	-4.69816,	6.577842434;
	86.9353,	-4.34383,	6.639323073;
	86.51535,	-3.9895,	6.695533982;
	86.3185,	-3.8189,	6.721882636;
	86.26601,	-3.7664,	6.728908498;
	86.25289,	-3.75328,	6.730664629;
	86.23976,	-3.75328,	6.732422098;
	86.22664,	-3.74016,	6.734178229;
	86.21352,	-3.72703,	6.73593436 ;
	86.17415,	-3.67454,	6.741204091;
	86.12165,	-3.63517,	6.748231291;
	86.08228,	-3.58268,	6.753501022;
	86.02979,	-3.54331,	6.760526883;
	85.99042,	-3.49081,	6.765796614;
	85.93793,	-3.45144,	6.772822476;
	85.89856,	-3.39895,	6.778092207;
	85.85919,	-3.35958,	6.783361937;
	85.76732,	-3.26772,	6.795658869;
	85.59672,	-3.07087,	6.818493923;
	85.45236,	-2.88714,	6.837816715;
	85.308005,	-2.69029,	6.857138839;
	85.163648,	-2.49344,	6.87646123 ;
	84.927428,	-2.09974,	6.908079615;
	84.822441,	-1.88976,	6.922132275;
	84.717454,	-1.69291,	6.936184936;
	84.638714,	-1.48294,	6.946724397;
	84.559974,	-1.27297,	6.957263859;
	84.494357,	-1.06299,	6.966046789;
	84.4418635,	-0.853018,	6.973073119;
	84.4024934,	-0.643045,	6.978342863;
	84.3762467,	-0.433071,	6.981856021;
	84.35,	0,	6.98536918];

a = round(size(points,1) / 3);
iPoints = [points(1,:); points(a,:); points(2 * a,:); points(end,:)];

% A general Bezier curve has four control points.  The curve intersects the
% end points, and the two inside points control the slope and curvature.
% Here, we force control points for adjacenet segments to be colinear and
% equidistant from the intersection point.

% Initial guess
cVectors = 4 * [0 -1 0; points(a - 1,:) - points(a + 1,:); points(2*a - 1,:) - points(2*a + 1,:); 0 -1 0];

goalFunc = @(x) doOptimization(iPoints, points, x);
x = fminsearch(goalFunc, [cVectors(1,2) cVectors(2,:) cVectors(3,:) cVectors(4,2)]);
cVectors = buildCVectors(x) %#ok<NOPRT>

drawSpline(iPoints, cVectors);
hold on
plot3(points(:,1), points(:,2), points(:,3), 'r+')
axis equal

return

function v = buildCVectors(x)
v = [0 -abs(x(1)) 0; x(2:4); x(5:7); 0 -abs(x(8)) 0];
return

function score = doOptimization(iPoints, goalPoints, guess)
cVectors = buildCVectors(guess);
score = computeError(iPoints, cVectors, goalPoints);
return

function p = computeSpline(iPoints, cVectors, resolution)

segments = size(iPoints,1) - 1;
p = zeros(segments * resolution, 3);
j = 1;
for i = 1:1:segments
    % TODO:  Do something smarter so we move constant increment along
    % spline, not constant increment in t
    for t = 0:1/resolution:1
        P0 = iPoints(i,:);
        if i == 1
            P1 = iPoints(i,:) + cVectors(i,:);
        else
            P1 = iPoints(i,:) - cVectors(i,:);
        end
        P2 = iPoints(i+1,:) + cVectors(i+1,:);
        P3 = iPoints(i+1,:);
        p(j,:) = (1 - t)^3 * P0 + 3 * (1 - t)^2 * t * P1 + 3 * (1 - t) * t^2 * P2 + t^3 * P3;
        j = j + 1;
    end
end

return

function drawSpline(iPoints, cVectors)

curve = computeSpline(iPoints, cVectors, 100);
hold off
plot3(curve(:,1), curve(:,2), curve(:,3), 'b-')

return

function e = computeError(iPoints, cVectors, goalPoints)

curve = computeSpline(iPoints, cVectors, 1000);
e = 0;
for i = 1:1:size(goalPoints, 1)
    xDist = (curve(:,1) - goalPoints(i,1)).^2;
    yDist = (curve(:,2) - goalPoints(i,2)).^2;
    zDist = (curve(:,3) - goalPoints(i,3)).^2;
    e = e + min(xDist + yDist + zDist);
end

return






